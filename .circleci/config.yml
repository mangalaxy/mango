# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    # directory where steps will run
    working_directory: ~/mango
    
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules  # location depends on npm version
          key: node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}

      - restore_cache:
          keys:
            - circleci-java-spring-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      # gets the project dependencies
      - run: mvn --fail-never dependency:go-offline || true
      
      - save_cache:
          paths:
            - ~/.m2
          key: circleci-java-spring-{{ checksum "pom.xml" }}

      # package into a jar
      - run: mvn package 
      
      # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
      - store_test_results:  
      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports

      # store the uber jar as an artifact
      - store_artifacts: 
      # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/classes
          destination: mango
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples    
